1. 원본 영상 읽어오기
저장되어 있는 도로를 달리는 자동차의 도영상 파일을 읽어온다. 읽어온 동영상 파일에서 프레임을 추출해 영상 처리를 한다. VideoCapture를 이용



2. 흰색, 노란색 범위에 있는 것만 필터링하여 후보로 저장
도로의 차선은 흰색과 노란색이므로 범위를 지정하여 필터링 하도록 한다. 원본 영상에서 흰색 차선 후보를 검출하고, HSV 영상에서 노란색 차선 후보를 검출한다. 그 후에 두 영상을 합친다. Scalar로 색의 범위를 지정해놓고 inRange 함수와 bitwise_and로 필터링한다.
inRange 함수는 특정 색상 영역을 추출한다. 지정 범위내에 있으면 그 값을 그대로, 그렇지 않은 부분은 0(검은색)으로 채워서 결과값을 반환한다. 그 후에 bitwise_and 함수로 비트의 AND 연산을 통해 mask로 씌워진 부분만 출력되도록 한다. 필터링된 흰색과 노란색 두 영상을 addweighted 함수로 합쳐서 차선 후보 영상을 만든다.



3. 영상을 GrayScale로 변환
차선 후보 영상으로부터 엣지(Edge)를 추출해야 한다. 엣지를 효과적으로 추출하기 위해 다음과 같은 과정을 거친다. 먼저 cvtColor 함수의 인자에 COLOR_BGR2GRAY를 사용하여 GrayScale로 변환한다.



4. Canny Edgr Detection으로 엣지를 추출(잡음 제거를 위한 가우시안 필터링도 포함)

이제 영상에서 엣지를 추출하기 위해 Canny Edge Detection 알고리즘을 사용한다. 엣지 검출 방식에서 가장 많이 사용하는 알고리즘이다. 일반적으로 엣지를 검출할 때는 노이즈(잡음)에 민감하다. 그래서 Canny 함수의 알고리즘은 다음의 5단계를 거친다.




5. 자동차의 진행 방향 바닥에 존재하는 차선만을 검출하기 위한 관심영역을 지정

엣지가 검출된 영상에서 차선만을 검출하기 위해서 자동차의 진행 방향의 일정 영역 바닥으로 제한한다. 우선 관심 영역의 정점 네 개를 계산한다. 모두 0으로 되어있는 비어 있는 영상을 만들고 그 영상에 네 개의 정점으로 정의된 가각형 내부를 fillConvexPoly 함수로 색상을 채운다. 그러면 다각형 내부만 0이 아닌 수가 되고, 이 영상을 원래의 엣지 검출 영상과 bitwise_and 함수를 실행한 결과 영상을 반환한다. 결과 영상은 관심 영역의 엣지만 남게 된다.



6. 허프 변환으로 엣지에서의 직선 성분을 추출

가장 핵심적인 단계로, 허프 변환을 사용하여 검출된 엣지 영상에서의 직선 성분을 검출한다.



7. 추출한 직선 성분으로 좌우 차선에 있을 가능성이 있는 직선들만 따로 뽑아서 좌우 각각 직선을 계산하고 선형 회귀로 가장 적합한 선 찾기

추출한 선분으로부터 좌우 차선에 있을 가능성이 있는 직선들만 따로 뽑아서 좌우 각각 하나의 직선으로 변환한다. 검출된 모든 허프 변환 직선들의 기울기를 계산한다. 직선을 기울기와 대략적인 위치에 따라 좌우로 분류한다.
선형 회귀를 통해 좌우 차선 각각 가장 적합한 선을 찾는다. 이때 fitLine 함수로 주어진 contour에 최적화된 직선을 추출한다.




8. 자동차의 진행 방향을 예측

자율 주행 자동차처럼 진행 방향을 알아서 파악하도록 하는 것이 목적으로 자동차의 진행 방향은 직진, 좌회전, 우회전 중 하나다. 두 차선이 교차하는 지점(사라지는 점)이 중심점으로 부터 왼쪽에 있는 지 오른쪽에 있는지를 통해 진행 방향을 예측한다. 먼저, 두 차선이 교차하는 지점의 x좌표를 계산하고 중심점의 x좌표보다 어느쪽에 있는지를 통해 예측한다.





9. 영상에 최종 차선을 선으로 그리고 내부 다각형을 색으로 채운다. 예측 진행 방향 텍스트를 영상에 출력

좌우 차선을 경계로 하는 내부 다각형을 투명하게 색을 채운다. 다각형의 네 꼭짓점을 이용하여 위에서도 사용했던 fillConvexPolyt 함수를 사용한다. 색을 채운 영상과 기존의 영상을 합친 후에 최종 좌우 차선을 line 함수로 선을 그린다. putText 함수로 예측 진행 방향을 텍스트로 영상에 입힌다.


10. 템플릿 매칭을 통해 이미지 검출을 한다.
검출된 템플릿 이미지와 유사한 영역에 사각형을 그려준다.



11. 결과 영상을 동영상 파일로 저장하고 중간에 캡쳐하여 사진으로 저장

VideoWriter로 결과 영상을 동영상 파일로 저장한다.
결과 실행 도중에 영상을 캡쳐하여 imwrite 함수로 이미지도 저장한다.


12. 결과 영상을 출력

결과 영상은 imshow 함수로 출력하고 esc 키로 종료할 수 있도록 한다.




< 결과 화면 >
좌우 차선은 빨간색 선으로 나타나고, 내부 다각형은 노란색으로 투명하게 채워져 있다. 진행 방향에 따라 가운데 위에 텍스트가 나타나는 것을 볼 수 있다.

자동차 객체 이미지와 영상을 템플릿 매칭하여 파란색 사각형으로 나타내고 있다. 






차량 객체 검출을 하고 싶었지만 딥러닝 YOLO 사용이 익숙하지 않았고 파이썬 코드 작성이 어려워 난관에 봉착하지만 템플릿 매칭을 통해 이를 극복했습니다. 인식율이 낮기는 하지만 차량에 사각형을 그려주어 표시할 수 있게 되었습니다.


































